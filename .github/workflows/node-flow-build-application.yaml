# SPDX-License-Identifier: Apache-2.0
name: "Node: Build Application"
on:
  workflow_dispatch:
    inputs:
      enable-unit-tests:
        description: "Unit Testing Enabled"
        type: boolean
        required: false
        default: true
      enable-hapi-tests:
        description: "HAPI Testing Enabled"
        type: boolean
        required: false
        default: false
      enable-spotless-check:
        description: "Spotless Check Enabled"
        type: boolean
        required: false
        default: false
      enable-snyk-scan:
        description: "Snyk Scan Enabled"
        type: boolean
        required: false
        default: false
      enable-gradle-determinism:
        description: "Gradle Build Determinism Check Enabled"
        type: boolean
        required: false
        default: false
      enable-docker-determinism:
        description: "Docker Build Determinism Check Enabled"
        type: boolean
        required: false
        default: false
      enable-ci-trigger:
        description: "Trigger CI Flows Enabled"
        type: boolean
        required: false
        default: false
      java-version:
        description: "Java JDK Version:"
        type: string
        required: false
        default: "21.0.6"
      java-distribution:
        description: "Java JDK Distribution:"
        type: string
        required: false
        default: "temurin"
  push:
    branches:
      - main
      - "release/*"

defaults:
  run:
    shell: bash

permissions:
  id-token: write
  actions: read
  pull-requests: write
  statuses: write
  checks: write
  contents: read

jobs:
  code:
    name: Compile Code
    uses: ./.github/workflows/node-zxc-compile-application-code.yaml
    with:
      java-version: ${{ github.event.inputs.java-version || '21.0.6' }}
      java-distribution: ${{ github.event.inputs.java-distribution || 'temurin' }}
      enable-spotless-check: false
    secrets:
      access-token: ${{ secrets.GITHUB_TOKEN }}
      gradle-cache-username: ${{ secrets.GRADLE_CACHE_USERNAME }}
      gradle-cache-password: ${{ secrets.GRADLE_CACHE_PASSWORD }}

  dependency-check:
    name: Dependency (Module Info)
    uses: ./.github/workflows/node-zxc-compile-application-code.yaml
    needs:
      - code
    with:
      custom-job-label: "Check"
      enable-dependency-check: true
    secrets:
      access-token: ${{ secrets.GITHUB_TOKEN }}
      gradle-cache-username: ${{ secrets.GRADLE_CACHE_USERNAME }}
      gradle-cache-password: ${{ secrets.GRADLE_CACHE_PASSWORD }}

  spotless:
    name: Spotless
    uses: ./.github/workflows/node-zxc-compile-application-code.yaml
    needs:
      - code
    with:
      custom-job-label: "Check"
      enable-unit-tests: false
      enable-spotless-check: true
    secrets:
      access-token: ${{ secrets.GITHUB_TOKEN }}
      gradle-cache-username: ${{ secrets.GRADLE_CACHE_USERNAME }}
      gradle-cache-password: ${{ secrets.GRADLE_CACHE_PASSWORD }}

  mats-unit-tests:
    name: MATS - Unit Tests
    uses: ./.github/workflows/node-zxc-compile-application-code.yaml
    needs:
      - dependency-check
      - spotless
    with:
      custom-job-label: "MATS Unit Tests"
      java-version: ${{ github.event.inputs.java-version || '21.0.6' }}
      java-distribution: ${{ github.event.inputs.java-distribution || 'temurin' }}
      enable-unit-tests: ${{ github.event_name == 'push' || github.event.inputs.enable-unit-tests == 'true' }}
      enable-hapi-tests-misc: ${{ github.event_name == 'push' || github.event.inputs.enable-hapi-tests == 'true' }}
      enable-hapi-tests-crypto: ${{ github.event_name == 'push' || github.event.inputs.enable-hapi-tests == 'true' }}
      enable-hapi-tests-iss: ${{ github.event_name == 'push' || github.event.inputs.enable-hapi-tests == 'true' }}
      enable-hapi-tests-token: ${{ github.event_name == 'push' || github.event.inputs.enable-hapi-tests == 'true' }}
      enable-hapi-tests-smart-contract: ${{ github.event_name == 'push' || github.event.inputs.enable-hapi-tests == 'true' }}
      enable-hapi-tests-restart: ${{ github.event_name == 'push' || github.event.inputs.enable-hapi-tests == 'true' }}
      enable-hapi-tests-nd-reconnect: ${{ github.event_name == 'push' || github.event.inputs.enable-hapi-tests == 'true' }}
      enable-spotless-check: ${{ github.event_name == 'push' || github.event.inputs.enable-spotless-check == 'true' }}
      enable-snyk-scan: ${{ github.event_name == 'push' || github.event.inputs.enable-snyk-scan == 'true' }}
      enable-network-log-capture: true
    secrets:
      access-token: ${{ secrets.GITHUB_TOKEN }}
      snyk-token: ${{ secrets.SNYK_TOKEN }}
      codacy-project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
      gradle-cache-username: ${{ secrets.GRADLE_CACHE_USERNAME }}
      gradle-cache-password: ${{ secrets.GRADLE_CACHE_PASSWORD }}
      codecov-token: ${{ secrets.CODECOV_TOKEN }}

  mats-gradle-determinism:
    name: MATS - Gradle Determinism
    uses: ./.github/workflows/zxc-verify-gradle-build-determinism.yaml
    needs:
      - dependency-check
      - spotless
    if: ${{ github.event_name == 'push' || github.event.inputs.enable-gradle-determinism == 'true' }}
    with:
      ref: ${{ github.event.inputs.ref || '' }}
      java-version: ${{ github.event.inputs.java-version || '21.0.6' }}
      java-distribution: ${{ github.event.inputs.java-distribution || 'temurin' }}
    secrets:
      gradle-cache-username: ${{ secrets.GRADLE_CACHE_USERNAME }}
      gradle-cache-password: ${{ secrets.GRADLE_CACHE_PASSWORD }}

  mats-docker-determinism:
    name: MATS - Docker Determinism
    uses: ./.github/workflows/zxc-verify-docker-build-determinism.yaml
    needs:
      - dependency-check
      - spotless
    if: ${{ github.event_name == 'push' || github.event.inputs.enable-docker-determinism == 'true' }}
    with:
      ref: ${{ github.event.inputs.ref || '' }}
      java-version: ${{ github.event.inputs.java-version || '21.0.6' }}
      java-distribution: ${{ github.event.inputs.java-distribution || 'temurin' }}
    secrets:
      gradle-cache-username: ${{ secrets.GRADLE_CACHE_USERNAME }}
      gradle-cache-password: ${{ secrets.GRADLE_CACHE_PASSWORD }}

  deploy-ci-trigger:
    name: Trigger CI Flows
    runs-on: hiero-network-node-linux-medium
    needs:
      - mats-unit-tests
      - mats-gradle-determinism
      - mats-docker-determinism
    if:
      ${{ (github.event_name == 'push' || github.event.inputs.enable-ci-trigger == 'true') &&
      needs.mats-unit-tests.result == 'success' &&
      needs.mats-gradle-determinism.result == 'success' &&
      needs.mats-docker-determinism.result == 'success' }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit

      - name: Trigger ZXF Deploy Production Release
        uses: step-security/workflow-dispatch@b4c1dc0afa074d0b4f0e653d3b80d4b2798599aa # v1.2.7
        with:
          workflow: .github/workflows/node-flow-deploy-release-artifact.yaml
          repo: hiero-ledger/hiero-consensus-node # ensure we are executing in the hiero-ledger org
          ref: main # ensure we are always using the workflow definition from the main branch
          token: ${{ secrets.GH_ACCESS_TOKEN }}
          inputs: '{
            "ref": "${{ github.ref }}"
            }'

  report-failure:
    name: Report XTS execution failure
    runs-on: hiero-network-node-linux-medium
    needs:
      - code
      - dependency-check
      - spotless
      - mats-unit-tests
      - mats-gradle-determinism
      - mats-docker-determinism
      - deploy-ci-trigger
    if: ${{ (needs.code.result != 'success' ||
      needs.dependency-check.result != 'success' ||
      needs.spotless.result != 'success' ||
      needs.mats-unit-tests.result != 'success' ||
      needs.mats-gradle-determinism.result != 'success' ||
      needs.mats-docker-determinism.result != 'success' ||
      needs.deploy-ci-trigger.result != 'success') &&
      !cancelled() && always() }}

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit

      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: "0"
          ref: main
          token: ${{ secrets.GH_ACCESS_TOKEN }}

      - name: Collect run logs in a log file
        env:
          GH_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
        continue-on-error: true
        run: |
          for job_id in $(gh run view ${{ github.run_id }} --json jobs --jq '.jobs | map(.databaseId) | .[0:-1] | .[]'); do
            echo "Fetching logs for job $job_id..."

            current_job_name=$(gh run view ${{ github.run_id }} --json jobs | jq --argjson job_id "$job_id" -r '.jobs[] | select(.databaseId == $job_id) | .name')

            echo "Logs for job $current_job_name :" >> run.log

            gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/hiero-ledger/hiero-consensus-node/actions/jobs/$job_id/logs >> run.log
          done

      - name: Upload log as artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        continue-on-error: true
        with:
          path: run.log

      - name: Get Commit Information
        id: fetch-commit-info
        run: |
          echo "commit-hash=$(git rev-parse HEAD)" >> "${GITHUB_OUTPUT}"
          echo "commit-author=$(git log -1 --pretty=format:'%an <%ae>' HEAD)" >> "${GITHUB_OUTPUT}"
          echo "commit-email=$(git log -1 --pretty=format:'%ae' HEAD)" >> "${GITHUB_OUTPUT}"

      - name: Find Commit Author in Slack
        id: find-commit-author-slack
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_CITR_BOT_TOKEN }}
          EMAIL: ${{ steps.fetch-commit-info.outputs.commit-email }}
        continue-on-error: true
        run: |
          SLACK_USER_ID=$(curl -s -X GET "https://slack.com/api/users.list" \
            -H "Authorization: Bearer ${SLACK_BOT_TOKEN}" | jq -r --arg email "${EMAIL}" \
            '.members[] | select((.profile.email // "" | ascii_downcase) == ($email | ascii_downcase)) | .name')

          if [[ -z "${SLACK_USER_ID}" || "${SLACK_USER_ID}" == "null" ]]; then
            echo "No Slack user found for email: ${EMAIL}"
            SLACK_USER_ID="No matching slack user found"
          else
            echo "Found slack user for email: ${EMAIL}"
            SLACK_USER_ID="<@${SLACK_USER_ID}>"
          fi
          echo "slack-user-id=${SLACK_USER_ID}" >> "${GITHUB_OUTPUT}"

      - name: Report failure (slack)
        uses: slackapi/slack-github-action@485a9d42d3a73031f12ec201c457e2162c45d02d # v2.0.0
        with:
          webhook: ${{ secrets.SLACK_CITR_OPERATIONS_WEBHOOK }}
          webhook-type: incoming-webhook
          payload-templated: true
          payload: |
            {
              "attachments": [
                {
                  "color": "#FF0000",
                  "blocks": [
                    {
                      "type": "header",
                      "text": {
                        "type": "plain_text",
                        "text": ":exclamation: Hiero Consensus Node - MATS Error Report",
                        "emoji": true
                      }
                    },
                    {
                      "type": "divider"
                    },
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "*MATS Job Resulted in failure on `main`. See status below.*"
                      },
                      "fields": [
                        {
                          "type": "mrkdwn",
                          "text": "*Code Compiles*: ${{ needs.code.result }}"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*Dependency (Module Info)*: ${{ needs.dependency-check.result }}"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*Spotless*: ${{ needs.spotless.result }}"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*MATS - Unit Tests*: ${{ needs.mats-unit-tests.result }}"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*MATS - Gradle Determinism*: ${{ needs.mats-gradle-determinism.result }}"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*MATS - Docker Determinism*: ${{ needs.mats-docker-determinism.result }}"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*Deploy CI Triggers*: ${{ needs.deploy-ci-trigger.result }}"
                        }
                      ]
                    },
                    {
                      "type": "divider"
                    },
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "*Workflow and Commit Information*"
                      },
                      "fields": [
                        {
                          "type": "mrkdwn",
                          "text": "*Source Commit*:"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "<${{ github.server_url }}/${{ github.repository }}/commit/${{ steps.fetch-commit-info.outputs.commit-hash }}>"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*Commit author*:"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "${{ steps.fetch-commit-info.outputs.commit-author }}"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*Slack user*:"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "${{ steps.find-commit-author-slack.outputs.slack-user-id }}"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*Workflow run ID*:"
                        },
                        {
                          "type": "mrkdwn",
                          "text": " ${{ github.run_id }}"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*Workflow run URL*:"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}>"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
