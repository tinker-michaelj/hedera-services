// SPDX-License-Identifier: Apache-2.0
syntax = "proto3";

package org.hiero.block.api;

option java_package = "org.hiero.block.api.protoc";
// <<<pbj.java_package = "org.hiero.block.api">>> This comment is special code for setting PBJ Compiler java package
option java_multiple_files = true;

import "block/shared_message_types.proto";

/**
 * Publish a stream of block items.
 *
 * Each request in the stream MUST contain at least one `BlockItem`.<br/>
 * Each request MAY contain more than one `BlockItem`.<br/>
 * A single request MUST NOT contain `BlockItem`s from more than one block.<br/>
 * Each request MAY contain a variable number of `BlockItem`s.<br/>
 * Each Block MUST begin with a single `BlockHeader` block item.<br/>
 * If a `BlockHeader` is present in a request, it MUST be the first `BlockItem`
 * in the `block_items` list.<br/>
 * The Block-Node SHALL append each `BlockItem` to an internal structure
 * to reconstruct full blocks.<br/>
 * The Block-Node MUST verify the block proof for each block before sending a
 * response message acknowledging that block.<br/>
 * Each Block MUST end with a single `BlockProof` block item.<br/>
 * If a `BlockProof` is present in a request, it MUST be the last `BlockItem`
 * in the `block_items` list.<br/>
 * The Block-Node MUST verify each Block using the `BlockProof` to
 * ensure all data was received and processed correctly.
 */
message PublishStreamRequest {
  oneof request {
    /**
     * A stream item containing one or more `BlockItem`s.
     * <p>
     * The full stream SHALL consist of many `block_items` messages
     * followed by a single `status` message.
     */
    BlockItemSet block_items = 1;

    /**
     * A message when the Publisher is deliberately ending the stream.<br/>
     * <p>
     * This message SHALL be sent exactly once for each `publishBlockStream`
     * call.<br/>
     * The Publisher SHALL cease sending block items and close the gRPC
     * connection after sending this message.<br/>
     * The Publisher MUST fill in the earliest and latest block numbers
     * when sending this message for any non-error condition.
     */
    EndStream end_stream = 2;
  }

  /**
   * A message sent to end a stream.
   *
   * This request message SHALL be sent from a Publisher to a Block-Node
   * when a `publishBlockStream` stream ends in an orderly manner.<br/>
   * This message SHALL be sent exactly once for each `publishBlockStream`
   * call.<br/>
   * The Publisher SHALL cease sending block items after sending
   * this request, and SHALL express the ending state of the stream with
   * the `status` enumeration.<br/>
   * A Publisher SHALL include the `earliest_block_number` and
   * `latest_block_number` values when sending this message for any
   * non-error condition.
   */
  message EndStream {
    // Note: MUST NOT name this `EndOfStream`, a PBJ bug in automatic unit
    //       test generation will attempt to convert this inner enum to the
    //       inner enum of the `Response` `EndOfStream` message, resulting
    //       in compilation errors. This bug will even attempt to convert
    //       the enums if the enums are not named the same.

    /**
     * A stream end code.
     * This code indicates the reason the stream ended.<br/>
     * <p>
     * This value MUST be set to a non-default value.
     */
    Code end_code = 1;

    /**
     * The number of the _earliest_ block available from the Publisher.
     * <p>
     * This value SHALL be set to the earliest block number available from
     * this Publisher.<br/>
     * This value MUST be set unless the stream `end_code`
     * is `ERROR`.
     */
    uint64 earliest_block_number = 2;

    /**
     * The number of the _latest_ block available from the Publisher.<br/>
     * This is the last _acknowledged_ block, not the last block produced.
     * <p>
     * This value SHALL be set to the latest block number available from
     * this Publisher.<br/>
     * This value MUST be set unless the stream `end_code`
     * is `ERROR`.
     */
    uint64 latest_block_number = 3;

    /**
     * An enumeration indicating why a Publisher ended a stream.
     *
     * This enumeration describes the reason a block stream
     * (sent via `publishBlockStream`) was ended by the Publisher.
     */
    enum Code {
      /**
       * An "unset value" flag, this value SHALL NOT be used.<br/>
       * This status indicates the server software failed to set a
       * status, and SHALL be considered a software defect.
       */
      UNKNOWN = 0;

      /**
       * The Publisher reached a reset point.<br/>
       * No errors occurred and the source Publisher orderly ended
       * the stream.
       * <p>
       * Publishers SHOULD use this code to end a stream and restart
       * occasionally. Occasionally resetting the stream increases
       * stability and allows for routine network configuration changes.
       */
      RESET = 1;

      /**
       * The delay between items was too long.<br/>
       * The destination system did not timely acknowledge a block.
       * <p>
       * The source SHALL start a new stream before the failed block.
       */
      TIMEOUT = 2;

      /**
       * The Publisher encountered an error.<br/>
       * The Publisher encountered an internal error and must try
       * again later.
       * <p>
       * Publishers that encounter internal logic errors, find themselves
       * "behind" the network, or otherwise detect an unexpected
       * situation MUST send this code and restart the stream before
       * the failed block.
       */
      ERROR = 3;

      /**
       * The Block-Node is too far behind to catch up directly.<br/>
       * The Block-Node responded to a block header with "BEHIND" and is
       * too far behind the Publisher.
       * <p>
       * The Block-Node MUST recover and "catch up" from another
       * trustworthy Block-Node.<br/>
       * The Publisher MAY stream items to a different Block-Node.<br/>
       * The Publisher MAY resume streaming to this Block-Node later.<br/>
       * The `EndOfStream` message MUST include the earliest and latest
       * blocks currently available from the Publisher.<br/>
       * The Block-Node SHOULD attempt to "catch up" to the _latest_ block
       * available from the Publisher.
       */
      TOO_FAR_BEHIND = 4;
    }
  }
}

/**
 * A response to writing a block stream.
 *
 * This message is sent in response to each Block in a block stream sent
 * to a Block-Node. The block stream is sent as a stream of messages, and each
 * message MAY be acknowledged with a message of this type.<br/>
 * Each `BlockItem` MAY be acknowledged with an `Acknowledgement`
 * response. Item acknowledgement is an OPTIONAL feature.<br/>
 * Each completed block SHALL be acknowledged with an `Acknowledgement`
 * response. Block acknowledgement is a REQUIRED feature.<br/>
 * A final response SHALL be sent with an `EndOfStream` status result after
 * the last block stream item is received, or when the Block-Node must end the
 * stream for any reason.<br/>
 * At any time, a Block-Node MAY send a `SkipBlock` response to request that
 * the Publisher skip the current block and resume with the next. When a
 * Block-Node sends a `SkipBlock`, that Block-Node SHALL subsequently send
 * an `Acknowledgement` for the same block, or SHALL send a `ResendBlock`
 * message.
 * If a failure is detected (which may include a block or block item that
 * fails validation) an `EndOfStream` response SHALL be sent with a
 * relevant error status.
 */
message PublishStreamResponse {
  oneof response {
    /**
     * A response sent to acknowledge successful receipt of a block.
     */
    BlockAcknowledgement acknowledgement = 1;

    /**
     * A response sent to request the Publisher end the current stream.
     */
    EndOfStream end_stream = 2;

    /**
     * A response sent to request the Publisher skip the current block.
     */
    SkipBlock skip_block = 3;

    /**
     * A response sent to request the Publisher resend a skipped block.
     */
    ResendBlock resend_block = 4;
  }

  /**
   * Acknowledgement of a full block.<br/>
   * This message is a necessary part of the block streaming protocol.
   *
   * This response SHALL be sent after a block state proof item is
   * received and verified, and that block is persisted.<br/>
   * The Block-Node SHALL send exactly one `BlockAcknowledgement` for
   * each successful block.
   */
  message BlockAcknowledgement {
    /**
     * The number of the last completed and _verified_ block.
     * <p>
     * A Publisher SHOULD consider all pending blocks with block number
     * less than or equal to this value to be acknowledged.<br/>
     * The next block sent by the Publisher SHOULD have a block number
     * one greater than this value.
     */
    uint64 block_number = 1;

    /**
     * A hash of the virtual merkle root for the block.
     * <p>
     * This SHALL be the hash calculated by the Block-Node for the
     * root node of the virtual merkle tree that is signed by the source
     * system to validate the block.
     */
    bytes block_root_hash = 2;

    /**
     * A flag indicating that the received block duplicates an
     * existing block.
     * <p>
     * If a Publisher receives acknowledgement with this flag set
     * true the Publisher MAY end the stream.<br/>
     * The `block_number` returned SHALL be the last block known and
     * verified by the Block-Node.<br/>
     * The Publisher MAY resume publishing immediately after the indicated
     * block.
     */
    bool block_already_exists = 3;
  }

  /**
   * Message indicating the Publisher should skip the current block.
   *
   * Block-Nodes SHOULD only skip a block if that block is currently being
   * received from another source.<br/>
   * Publishers MUST stop sending the current block and resume with
   * the block header for the next block, or else end the stream.<br/>
   * A Publisher that receives this message SHALL subsequently receive an
   * acknowledgement for the skipped block or SHALL receive a `ResendBlock`
   * message.<br/>
   * A Publisher asked to skip a block SHOULD NOT delay any subsequent
   * block, but should send that block as soon as it is available.<br/>
   * A Publisher MAY be asked to skip multiple blocks in succession, but
   * SHOULD interpret that as the presence of another Publisher with a
   * lower latency connection.<br/>
   * A Publisher MAY choose to end the stream and send the block to a
   * different Block-Node, rather than skip sending the block to the
   * current Block-Node.
   */
  message SkipBlock {
    /**
     * The number of the _unverified_ block to skip.
     * <p>
     * This MUST match the block number of the `BlockHeader` most recently
     * sent by the Publisher.
     */
    uint64 block_number = 1;
  }

  /**
   * Message indicating the Publisher must resend from a specified block.
   * A Publisher might resend the block, if it has that block available,
   * or it might choose to end the stream if it has already received
   * acknowledgement from a different trustworthy Block-Node.
   *
   * On receiving this message, a Publisher MUST resume sending blocks at
   * the block number indicated, or else end the stream.<br/>
   * This message SHALL only be sent following a `SkipBlock` message for a
   * block that has not been acknowledged.<br/>
   * A Block-Node SHALL NOT send a `ResendBlock` message for any block that
   * is already acknowledged.<br/>
   * A Publisher MAY choose to end the stream rather than resend the
   * the requested block.
   */
  message ResendBlock {
    /**
     * The number of the _unverified_ block to re-send.
     * <p>
     * This SHALL be the block number one greater than the last block
     * this Block-Node has successfully stored and verified.
     */
    uint64 block_number = 1;
  }

  /**
   * A message sent to end a stream.
   *
   * This response message SHALL be sent from a Block-Node to a block
   * stream Publisher when a `publishBlockStream` stream ends.<br/>
   * This message SHALL be sent exactly once for each `publishBlockStream`
   * call.<br/>
   * The Publisher SHALL cease sending block items upon receiving
   * this response, and MAY determine the ending state of the stream from
   * the `status` enumeration and the `block_number` returned.<br/>
   * A Publisher SHOULD verify that the `block_number` value matches the
   * last block sent, and SHOULD resend one or more blocks if the value
   * here does not match the expected value.
   */
  message EndOfStream {
    /**
     * A response code.
     * <p>
     * This code indicates the reason the stream ended.<br/>
     * This value MUST be set to a non-default value.
     */
    Code status = 1;

    /**
     * The number of the last completed, _persisted_, and _verified_ block.
     * <p>
     * Block-Nodes SHOULD only end a stream after a block state proof to avoid
     * the need to resend items.<br/>
     * If status is a failure code, the Publisher MUST start a new
     * stream at the beginning of the first block _following_ this number
     * (e.g. if this is 91827362983, then the new stream must start with
     * the _header_ for block 91827362984).
     */
    uint64 block_number = 2;

    /**
     * An enumeration indicating the status of this request.
     *
     * This enumeration SHALL describe the reason a block stream
     * (sent via `publishBlockStream`) was ended by the receiving
     * Block-Node.
     */
    enum Code {
      /**
       * An "unset value" flag, this value SHALL NOT be used.<br/>
       * This status indicates the server software failed to set a
       * status, and SHALL be considered a software defect.
       */
      UNKNOWN = 0;

      /**
       * The request succeeded.<br/>
       * No errors occurred and the receiving Block-Node orderly ended the stream.
       * <p>
       * The Publisher MAY start a new stream beginning with the next block.
       */
      SUCCESS = 1;

      /**
       * The delay between items was too long.
       * <p>
       * The source MUST start a new stream before the failed block.
       */
      TIMEOUT = 2;

      /**
       * An item was received out-of-order.<br/>
       * This might be two headers without a proof between them, or similar.
       * <p>
       * The source MUST start a new stream before the failed block.
       */
      OUT_OF_ORDER = 3;

      /**
       * A block state proof item could not be validated.<br/>
       * The source MUST start a new stream before the failed block.
       */
      BAD_STATE_PROOF = 4;

      /**
       * The Block-Node is "behind" the Publisher.<br/>
       * Ths Publisher has sent a block later than this Block-Node
       * can process. The Publisher may retry by sending blocks immediately
       * following the `block_number` returned, or may connect
       * to another Block-Node.
       * <p>
       * Block-Nodes that are "behind" SHOULD attempt to "catch up" by requesting
       * blocks from another Block-Node or other source of recent historical
       * block stream data.
       */
      BEHIND = 5;

      /**
       * The Block-Node had an internal error and cannot continue processing.<br/>
       * The Publisher may retry again later.
       */
      INTERNAL_ERROR = 6;

      /**
       * The Block-Node failed to store the block persistently.
       * <p>
       * The Publisher SHOULD start a new stream to send the block to
       * this Block-Node, or any other reliable Block-Node.
       * The Publisher MUST NOT discard the block until it is successfully
       * persisted and verified (and acknowledged) by at least one Block-Node.
       */
      PERSISTENCE_FAILED = 7;
    }

  }
}

/**
 * Remote procedure calls (RPCs) for the Block-Node block stream publishing services.
 */
service BlockStreamPublishService {
  /**
   * Publish a stream of blocks.
   * <p>
   * Each item in the stream MUST contain one `BlockItem`.<br/>
   * Each Block MUST begin with a single `BlockHeader` block item.<br/>
   * The Block-Node SHALL append each `BlockItem` to an internal structure
   * to construct full blocks.<br/>
   * Each Block MUST end with a single `BlockStateProof` block item.<br/>
   * It is RECOMMENDED that the implementations verify the Block using the
   * `BlockStateProof` to validate all data was received correctly.<br/>
   * This API SHOULD, generally, be restricted based on mTLS authentication
   * to a limited set of Publisher (i.e. consensus node) systems.
   */
  rpc publishBlockStream (stream PublishStreamRequest) returns (stream PublishStreamResponse);
}
