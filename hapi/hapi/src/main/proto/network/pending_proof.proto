/**
 * # Pending block proof
 * Details of a block proof that is pending a TSS signature.
 *
 * ### Keywords
 * The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
 * "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
 * document are to be interpreted as described in
 * [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
 * [RFC8174](https://www.ietf.org/rfc/rfc8174).
 */

syntax = "proto3";

package com.hedera.node.internal.network;

// SPDX-License-Identifier: Apache-2.0
import "block/stream/block_proof.proto";

option java_package = "com.hedera.node.internal.network.legacy";
// <<<pbj.java_package = "com.hedera.node.internal.network">>> This comment is special code for setting PBJ Compiler java package
option java_multiple_files = true;

/**
 * Provides context for a block proof pending a TSS signature.
 */
message PendingProof {
  /**
   * The block whose proof is pending.
   */
  uint64 block = 1;
  /**
   * The hash requiring a TSS signature.
   */
  bytes block_hash = 2;
  /**
   * The state hash of the start of the pending block.
   */
  bytes start_of_block_state_root_hash = 3;
  /**
   * The hash of the previous block.
   */
  bytes previous_block_hash = 4;
  /**
   * If set, the sibling hashes that could be used to prove the
   * previous block hash (in case it was also pending, and we
   * obtain a signature for this block first).
   * <p>
   * If not set, the previous block hash can be assumed to have
   * already been signed and this block proof will not be used
   * for any indirect proofs.
   */
  repeated com.hedera.hapi.block.stream.MerkleSiblingHash sibling_hashes_from_prev_block_root = 5;
}
