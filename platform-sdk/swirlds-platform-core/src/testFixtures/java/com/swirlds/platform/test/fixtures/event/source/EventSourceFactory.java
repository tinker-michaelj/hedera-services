// SPDX-License-Identifier: Apache-2.0
package com.swirlds.platform.test.fixtures.event.source;

import com.swirlds.base.utility.Pair;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Predicate;
import java.util.function.Supplier;

public class EventSourceFactory {

    /** the address book to use */
    private final int numNodes;
    /**
     * a list of lambdas that supply a custom event source for some indexes
     */
    private final List<Pair<Predicate<Long>, Supplier<EventSource>>> customSources;

    public EventSourceFactory(final int numNodes) {
        this.numNodes = numNodes;
        this.customSources = new LinkedList<>();
    }

    /**
     * Add a custom source supplier for certain indexes
     *
     * @param indexPredicate
     * 		the lambda that takes in the index of the node, and returns whether this source should come from the
     * 		supplier lambda
     * @param sourceSupplier
     * 		supplies the custom source
     */
    public void addCustomSource(final Predicate<Long> indexPredicate, final Supplier<EventSource> sourceSupplier) {
        customSources.add(Pair.of(indexPredicate, sourceSupplier));
    }

    /**
     * @return a list of sources some of which might be generated by custom suppliers
     */
    public List<EventSource> generateSources() {
        final List<EventSource> list = new LinkedList<>();
        forEachNode:
        for (long i = 0; i < numNodes; i++) {
            for (final Pair<Predicate<Long>, Supplier<EventSource>> customSource : customSources) {
                if (customSource.left().test(i)) {
                    list.add(customSource.right().get());
                    continue forEachNode;
                }
            }
            // if no custom node is set for this index, then add standard one
            list.add(newStandardEventSource());
        }
        return list;
    }

    public static StandardEventSource newStandardEventSource() {
        return new StandardEventSource(false);
    }

    public static ForkingEventSource newForkingEventSource() {
        return new ForkingEventSource(false);
    }
}
